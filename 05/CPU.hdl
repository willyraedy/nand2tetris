// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // debug
    Not(in=instruction[0], out=not0);
    Not(in=instruction[1], out=not1);
    Not(in=instruction[2], out=not2);
    Not(in=instruction[3], out=not3);
    Not(in=false, out=shouldBeTrue);
    Not(in=true, out=shouldBeFalse);
    Not16(in=instruction, out=notInst);
    Not16(in=notInst, out=origInst);


    // Should A load new value?
    Not(in=instruction[15], out=aInst);
    And(a=instruction[15], b=instruction[5], out=cLoadsA);
    Or(a=aInst, b=cLoadsA, out=aLoad);

    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aVal);
    ARegister(in=aVal, load=aLoad, out=aToPC, out=aToALU, out[0..14]=addressM);

    // Should D load a new value?
    And(a=instruction[15], b=instruction[4], out=dLoad);

    DRegister(in=aluOut, load=dLoad, out=dToALU);

    // Should the alu get A or M?
    Mux16(a=aToALU, b=inM, sel=instruction[12], out=aOrM);

    ALU(x=dToALU, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=isZero, ng=isLThan);

    // Should pc load new value?
    And(a=instruction[15], b=instruction[2], out=jmpIfLT);
    And(a=instruction[15], b=instruction[1], out=jmpIfZero);
    And(a=instruction[15], b=instruction[0], out=jmpIfGT);

    Not(in=isZero, out=notZero);
    Not(in=isLThan, out=notLThan);
    And(a=notZero, b=notLThan, out=isGThan);

    And(a=jmpIfLT, b=isLThan, out=jmp1);
    And(a=jmpIfGT, b=isGThan, out=jmp2);
    And(a=jmpIfZero, b=isZero, out=jmp3);

    Or8Way(in[0]=jmp1, in[1]=jmp2, in[2]=jmp3, in[3..7]=false, out=jmpLoad);

    PC(in=aToPC, load=jmpLoad, inc=true, reset=reset, out[0..14]=pc);

    // Should output be written to Memory?
    And(a=instruction[15], b=instruction[3], out=writeM);

}
